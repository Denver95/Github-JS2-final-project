//####Cart. - Означает переделанные пункты на новые.

//------------------------------------------------------
//1. Создаем для корзины новый компанент. Называем cart в качестве передаваемых значений мы будем использовать props
//------------------------------------------------------

Vue.component('cart', {

	//------------------------------------------------------
	//2.предаваемые занчения cartItems -массив с товарами. img - изображение, visibikity - видимость
	//------------------------------------------------------

	// ================================================================
	//####Cart.1. Убираем пропсы и добовляем данные kомпонента. Забираме их из VueJS data
	//Все что нам необходимо для корзины забираме из data VueJS
	// ================================================================

	data() {
		return {
			imgCart: 'https://avatarko.ru/img/kartinka/32/Halloween_31492.jpg',
			cartUrl: '/getBasket.json',
			cartItems: [],
			showCart: false,
		}
	},

	// props: ['cartItems', 'img', 'visibility'],

	// ================================================================
	//####Cart.2. = Все методы что использует наша корзина переносим в компонент
	//####Cart.2.1 = Метод getJson является методом родителя.НАм надо на него ссылаться.Добавим $parent
	// ================================================================

	methods: {
		addProduct(product) {
			this.$parent.getJson(`${API_URL}/addToBasket.json`)
				.then(data => {
					if (data.result === 1) {

						//------------------------------------------------------
						// Просматриваем массив где лежат все продукты и проверяем есть ли данный айди-продукт в данном массиве. Если еть то добовляем его колличество. Если нету то вписываем его
						//метод Find()  он ищет в экземлерах (cartItem) определненные элементы (id)
						//------------------------------------------------------

						let find = this.cartItems.find(el => el.id_product === product.id_product);

						//------------------------------------------------------
						//Если он есть то просто добовляем количество
						//------------------------------------------------------

						if (find) {
							find.quantity++;

							//------------------------------------------------------
							// //Метод updateCart  вносит изменнения на страницу( в корзину)
							//------------------------------------------------------

							// this.updateCart(find);
						} else {

							//------------------------------------------------------
							// Создаем новый обьект и присваеимваем туда новое значение колличество и склеиваим с итерированым product 20 минута 6 урока
							//------------------------------------------------------

							let prd = Object.assign({ quantity: 1 }, product);

							//------------------------------------------------------
							//После создания обьекта мы сможем добавить данные в наш массив cartItem
							//------------------------------------------------------

							this.cartItems.push(prd);
						}
					} else {
						alert('Error');
					}
				})
		},

		//------------------------------------------------------
		//Удаление товара
		//------------------------------------------------------

		remove(item) {

			//------------------------------------------------------
			// Делаем запорос на сервер
			//------------------------------------------------------

			this.$parent.getJson(`${API_URL}/deleteFromBasket.json`)
				.then(data => {
					if (data.result === 1) {

						//------------------------------------------------------
						// Product и есть массив и Мы можем сразу обратиться к нему и внем искать нужные нам данные. Проверяем какое количество у нас есть товара\\\
						//------------------------------------------------------

						if (item.quantity > 1) {
							item.quantity--;
						} else {

							//------------------------------------------------------
							//Удаляем товар  с помощью метода splice первый аргумент (элемент который нужно удалить)
							//------------------------------------------------------

							this.cartItems.splice(this.cartItems.indexOf(item), 1)
						}
					}
				})
		},

	},

	// ================================================================
	// ####Cart.5.1 = Добовляем mounted(){}. Данные должны приходить в компанент. Они не должны приходить из родительского элемента.
	// ####Cart.5.2 = Забираме их из Родителя VueJS и добовляем сюда
	// ####Cart.5.3 = Метод getJson является методом родителя. НАм надо на него ссылаться. Добавим $parent
	// ================================================================

	mounted() {
		this.$parent.getJson(`${API_URL + this.cartUrl}`)

			//------------------------------------------------------
			// получаем данные с URL
			//------------------------------------------------------

			.then(data => {

				//------------------------------------------------------
				// Итерируем, перебераем данные
				//------------------------------------------------------

				for (let el of data.contents) {

					//------------------------------------------------------
					// добовляем в массив
					//------------------------------------------------------

					this.cartItems.push(el);
				}
			});
	},

	//------------------------------------------------------
	//3.шаблон карзины
	//4.в шаблоне меняем v-show="showCart" на v-show="visibility"
	//5. Итерируем массив v-for="item of cartItems"  cartItems - это проброшенное значение из Props
	// 6.Вызов события клик мы должны ловить от родителя. Меняем @click="remove(item) на @click="$emit('remove' item)"
	// 7.Меняем :src="imgCart" на :src="img"
	//8.Меняем в HTML разметку на <cart></cart>. Старую удаляем 
	//9.Нам нужно в компанент Cart-item прокинуть значения которые нам понадобятся :cart-item="item" :img="img"
	//------------------------------------------------------

	// ================================================================
	// ####Cart.3.1 = Меняем шаблон корзины. Мы использовали пробрасывание из пропсов. Меняем их. И добовляем кнопку в шаблон(Забираме из HTML).
	// ####Cart.3.2 = Кнопка и блок корзины лежат на одно уровне. Это не допустимо. По этому оборачиваем все в div
	// ####Cart.3.3 = Отображение корзины использовали v-show="visibility". Меняем на v-show="showCart"
	// ####Cart.3.4 = В родителе нет метода добавленияи удаления товаров. Мы будем ловить и вызывать в компаненте корзины метод @remove="remove"
	//####Cart.3.5 =  Подправим img = imgCart
	// ================================================================

	template: `
	<div>
		<button class="btn-property" type="button" @click="showCart = !showCart">Корзина</button>
		<div class="basket" v-show="showCart">
			<p v-if="!cartItems.length">Корзина пуста</p>
			<cart-item class="cart-item" 
			v-for="item of cartItems" 
			:key="item.id_product" 
			:cart-item="item" 
			:img="imgCart"
			@remove="remove">
			</cart-item>
		</div> 
	</div>
	`
});

//------------------------------------------------------
//10.регистрируем еще один компонент для корзины (ребенок)
//------------------------------------------------------

// ================================================================
// ####Cart.4.1 = Метод @click="$parent.$emit('remove', cartItem)" будем ловить не на глобальном уровне ($parent.) а от родителя. Меняем на $emit('remove', cartItem)"
// ================================================================

Vue.component('cart-item', {
	props: ['cartItem', 'img'],

	//------------------------------------------------------
	//11.Удаляем v-for="item of cartItems" :key="item.id_product". мы будем все это вызывать у родителя cart
	//------------------------------------------------------

	template: `
	<div class="cart-item" >
		<div class="product-bio">
			<img :src="img" alt="Some image">
			<div class="product-desc">
				<p class="product-title">{{cartItem.product_name}}</p>
				<p class="product-quantity"> Количество:{{cartItem.quantity}} шт.</p>
				<p class="product-single-price"> {{cartItem.price}} p.</p>
			</div>
		</div>
		<div class="right-block">
			<p class="product-price"> {{cartItem.quantity * cartItem.price}} p.</p>
			<button class="del-btn" @click="$emit('remove', cartItem)">&times;</button>
		</div>
	</div>
`
});

//------------------------------------------------------
// 12.Нам нужно использовать глобальны метод ремув. Мы меняем @click="$emit('remove', item)" на  @click="$parent.$emit('remove', cartItem)"
//13.Меняем {{item.product_name}} на {{cartItem.product_name}}
//$parent$emit - от внука до родителя
//$emit - до ближайшего родителя
//------------------------------------------------------